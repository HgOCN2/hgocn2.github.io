import{_ as c,r as e,o as i,c as l,b as n,e as a,w as u,d as s,a as p}from"./app-VitiyI7N.js";const r="/assets/alexnet-architecture-ABrUsAnb.png",d="/assets/stanford-dogs-dataset-ssKPtPKX.png",k="/assets/stanford-dogs-dataset-chihuahua-rMVq_9wx.png",m={},v=n("h1",{id:"基于tenserflow的目标识别与分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于tenserflow的目标识别与分类","aria-hidden":"true"},"#"),s(" 基于TenserFlow的目标识别与分类")],-1),b=p('<h1 id="简化版alexnet的实现" tabindex="-1"><a class="header-anchor" href="#简化版alexnet的实现" aria-hidden="true">#</a> 简化版AlexNet的实现</h1><p>我们的网络架构采取了AlexNet的简化版本，但并未使用AlexNet的所有层，也和TensorFlow提供的CNN入门教程非常类似。</p><h2 id="网络的架构" tabindex="-1"><a class="header-anchor" href="#网络的架构" aria-hidden="true">#</a> 网络的架构</h2><p><img src="'+r+'" alt="alexnet-architecture"></p><h2 id="stanford-dogs数据集" tabindex="-1"><a class="header-anchor" href="#stanford-dogs数据集" aria-hidden="true">#</a> Stanford Dogs数据集</h2>',5),_={href:"http://vision.stanford.edu/aditya86/ImageNetDogs/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://vision.stanford.edu/aditya86/ImageNetDogs/README.txt",target:"_blank",rel:"noopener noreferrer"},h=p('<p>该数据集的总大小大约800M，需要将下载的压缩文件解压至和程序文件同目录下的一个新的名为<code>imagenet-dogs</code>的目录下。</p><p>该数据集包含120个不同品种的狗的图像，其中80%的图像用于训练，而其余20%的图像用于测试。</p><p><img src="'+d+'" alt="stanford-dogs-dataset"></p><p>每个狗品种都对应一个类似于<code>n02085620-Chihuahua</code>的文件夹，其中目录名称的后一半对应于狗品种的英语表达。在每个目录中，都有大量属于该品种的狗的图像，每幅图都是JPEG格式且尺寸各异。</p><p><img src="'+k+`" alt="stanford-dogs-dataset-chihuahua"></p><h2 id="一步步写代码" tabindex="-1"><a class="header-anchor" href="#一步步写代码" aria-hidden="true">#</a> 一步步写代码</h2><h3 id="将图像转为tfrecord文件" tabindex="-1"><a class="header-anchor" href="#将图像转为tfrecord文件" aria-hidden="true">#</a> 将图像转为TFRecord文件</h3><p>（1）引入tf包</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf
<span class="token keyword">import</span> os

sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>InteractiveSession<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）读取目录下的每一个图片的路径和名称：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> glob

image_filenames <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&quot;./imagenet-dogs/n02*/*.jpg&quot;</span><span class="token punctuation">)</span>
image_filenames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;./imagenet-dogs/n02097658-silky_terrier/n02097658_26.jpg&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;./imagenet-dogs/n02097658-silky_terrier/n02097658_4869.jpg&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）将品种和各自品种的图像名称放到train和test字典中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> itertools <span class="token keyword">import</span> groupby
<span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict

training_dataset <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
testing_dataset <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>

<span class="token comment"># 将文件名分解为品种和对应的文件名，品种对应于文件夹名称</span>
image_filename_with_breed <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span>  filename<span class="token punctuation">:</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> image_filenames<span class="token punctuation">)</span>
<span class="token comment"># (&#39;n02097658-silky_terrier&#39;, &#39;./imagenet-dogs/n02097658-silky_terrier/n02097658_26.jpg&#39;)</span>

<span class="token comment"># 依据品种对（上述返回的元组的第0个分量）对图像分组</span>
<span class="token keyword">for</span> dog_breed<span class="token punctuation">,</span> breed_images <span class="token keyword">in</span> groupby<span class="token punctuation">(</span>image_filename_with_breed<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 枚举每个品种的图像，并将大约20%的图像划入测试集</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> breed_image <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>breed_images<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            testing_dataset<span class="token punctuation">[</span>dog_breed<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>breed_image<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            training_dataset<span class="token punctuation">[</span>dog_breed<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>breed_image<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            
    <span class="token comment"># 检查每个瓶中的测试图像是否至少有全部图像的18%</span>
    breed_training_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>training_dataset<span class="token punctuation">[</span>dog_breed<span class="token punctuation">]</span><span class="token punctuation">)</span>
    breed_testing_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>testing_dataset<span class="token punctuation">[</span>dog_breed<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token keyword">assert</span> <span class="token builtin">round</span><span class="token punctuation">(</span>breed_testing_count <span class="token operator">/</span> <span class="token punctuation">(</span>breed_training_count <span class="token operator">+</span> breed_testing_count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.18</span><span class="token punctuation">,</span> <span class="token string">&quot;Not enough testing images.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）打开每幅图像，将其专为灰度图，调整尺寸，然后添加到TFRecord文件中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">write_records_file</span><span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> record_location<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>record_location<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;目录 %s 不存在，自动创建中...&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>record_location<span class="token punctuation">)</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>record_location<span class="token punctuation">)</span>
    
    writer <span class="token operator">=</span> <span class="token boolean">None</span>
    current_index <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">for</span> breed<span class="token punctuation">,</span> images_filenames <span class="token keyword">in</span> dataset<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> image_filename <span class="token keyword">in</span> image_filenames<span class="token punctuation">:</span>
            <span class="token keyword">if</span> current_index <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> writer<span class="token punctuation">:</span>
                    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                record_filename <span class="token operator">=</span> <span class="token string">&quot;{record_location}-{current_index}.tfrecords&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
                    record_location<span class="token operator">=</span>record_location<span class="token punctuation">,</span> current_index<span class="token operator">=</span>current_index<span class="token punctuation">)</span>
                writer <span class="token operator">=</span> tf<span class="token punctuation">.</span>python_io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span>record_filename<span class="token punctuation">)</span>
            current_index <span class="token operator">+=</span> <span class="token number">1</span>
            image_file <span class="token operator">=</span> tf<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span>image_filename<span class="token punctuation">)</span>
            <span class="token comment"># 在ImageNet的图像中，有少量无法被TensorFlow识别为JPEG的图像，利用try/catch可将这些图像忽略</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                image <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>decode_jpeg<span class="token punctuation">(</span>image_file<span class="token punctuation">)</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>image_filename<span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token comment"># 抓换为灰度图可以减少处理的计算量和内存占用，但这不是必须的</span>
            grayscale_image<span class="token operator">=</span>tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>rgb_to_grayscale<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
            resized_image<span class="token operator">=</span>tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>resize_images<span class="token punctuation">(</span>grayscale_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment"># 这里之所以用td.cast，是因为虽然尺寸更改后的图像的数据类型是浮点型，但是rgb值尚未处理转换到[0,1)区间内</span>
            <span class="token comment"># tobytes是将图片转成二进制</span>
            image_bytes <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>resized_image<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">#将表示种类的字符串转换为python默认的utf-8格式，防止有问题</span>
            image_label <span class="token operator">=</span> breed<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>

            example <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Example<span class="token punctuation">(</span>features<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Features<span class="token punctuation">(</span>feature<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token string">&#39;label&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>bytes_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>image_label<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string">&#39;image&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>Feature<span class="token punctuation">(</span>bytes_list<span class="token operator">=</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>BytesList<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">[</span>image_bytes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># 将文件序列化为二进制字符串</span>
            writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>example<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 分别将测试数据和训练数据写入tensorflow record，</span>
<span class="token comment"># 分别保存在文件夹./output/testing-images/和./output/training-images/下面。</span>
write_records_file<span class="token punctuation">(</span>testing_dataset<span class="token punctuation">,</span> <span class="token string">&quot;./output/testing-images/testing-image&quot;</span><span class="token punctuation">)</span>
write_records_file<span class="token punctuation">(</span>training_dataset<span class="token punctuation">,</span> <span class="token string">&quot;./output/training-images/training-image&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载图像" tabindex="-1"><a class="header-anchor" href="#加载图像" aria-hidden="true">#</a> 加载图像</h3><p>一旦测试集和训练集被转换为TFRecord格式，便可以按照TFRecord文件而非JPEG文件进行读取。我们的目标是每次加载少量图像及相应的标签。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># string_input_producer会产生一个文件名队列；match_filenames_once获取符合正则表达式的文件列表</span>
filename_queue <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>string_input_producer<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>match_filenames_once<span class="token punctuation">(</span><span class="token string">&quot;./output/training-images/*.tfrecords&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># reader从文件名队列中读数据。对应的方法是reader.read</span>
reader <span class="token operator">=</span> tf<span class="token punctuation">.</span>TFRecordReader<span class="token punctuation">(</span><span class="token punctuation">)</span>
_<span class="token punctuation">,</span> serialized <span class="token operator">=</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename_queue<span class="token punctuation">)</span>

<span class="token comment"># parse_single_example将Example协议内存块(protocol buffer)解析为张量</span>
features <span class="token operator">=</span> tf<span class="token punctuation">.</span>parse_single_example<span class="token punctuation">(</span>
    serialized<span class="token punctuation">,</span>
    features<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token string">&#39;label&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;image&#39;</span><span class="token punctuation">:</span> tf<span class="token punctuation">.</span>FixedLenFeature<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 获取图像</span>
record_image <span class="token operator">=</span> tf<span class="token punctuation">.</span>decode_raw<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
<span class="token comment"># 修改图像的形状有助于训练和输出的可视化</span>
image <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>record_image<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 获取标签</span>
label <span class="token operator">=</span> tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>string<span class="token punctuation">)</span>

min_after_dequeue <span class="token operator">=</span> <span class="token number">10</span>
batch_size <span class="token operator">=</span> <span class="token number">3</span>
capacity <span class="token operator">=</span> min_after_dequeue <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> batch_size
image_batch<span class="token punctuation">,</span> label_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>shuffle_batch<span class="token punctuation">(</span>
    <span class="token punctuation">[</span>image<span class="token punctuation">,</span> label<span class="token punctuation">]</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> capacity<span class="token operator">=</span>capacity<span class="token punctuation">,</span> min_after_dequeue<span class="token operator">=</span>min_after_dequeue<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h3><p>（1）第一个卷积层</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将图像转换为灰度值位于[0,1]的浮点类型，以与convolution2d期望的输入匹配</span>
float_image_batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>image<span class="token punctuation">.</span>convert_image_dtype<span class="token punctuation">(</span>image_batch<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

conv2d_layer_one <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>convolution2d<span class="token punctuation">(</span>
    float_image_batch<span class="token punctuation">,</span>
    num_output_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>     <span class="token comment"># The number of filters to generate</span>
    kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment"># It&#39;s only the filter height and width.</span>
    activation_fn<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">,</span>
    weight_init<span class="token operator">=</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">,</span>
    stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    trainable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

pool_layer_one <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>conv2d_layer_one<span class="token punctuation">,</span>
    ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 注意，卷积输出的第1维和最后一维未发生改变，但中间的两维发生了变化</span>
conv2d_layer_one<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pool_layer_one<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）第二个卷积层</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>conv2d_layer_two <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>convolution2d<span class="token punctuation">(</span>
    pool_layer_one<span class="token punctuation">,</span>
    num_output_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span>        <span class="token comment"># More output channels means an increase in the number of filters</span>
    kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    activation_fn<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">,</span>
    weight_init<span class="token operator">=</span>tf<span class="token punctuation">.</span>random_normal<span class="token punctuation">,</span>
    stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    trainable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

pool_layer_two <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>conv2d_layer_two<span class="token punctuation">,</span>
    ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    padding<span class="token operator">=</span><span class="token string">&#39;SAME&#39;</span><span class="token punctuation">)</span>

conv2d_layer_two<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pool_layer_two<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）展开最后一个池化层</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>flattened_layer_two <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>
    pool_layer_two<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        batch_size<span class="token punctuation">,</span>  <span class="token comment"># Each image in the image_batch</span>
        <span class="token operator">-</span><span class="token number">1</span>           <span class="token comment"># Every other dimension of the input</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

flattened_layer_two<span class="token punctuation">.</span>get_shape<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）两个全连接层</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># weight_init参数也可接收一个可用参数，这里使用一个lambda表达式返回了一个截断的正态分布</span>
<span class="token comment"># 并指定了该分布的标准差</span>
hidden_layer_three <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fully_connected<span class="token punctuation">(</span>
    flattened_layer_two<span class="token punctuation">,</span>
    <span class="token number">512</span><span class="token punctuation">,</span>
    weight_init<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">38912</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    activation_fn<span class="token operator">=</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu
<span class="token punctuation">)</span>

<span class="token comment"># 对一些神经元进行dropout处理，消减它们在模型中的重要性</span>
hidden_layer_three <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>hidden_layer_three<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>

<span class="token comment"># 输出是前面的层与训练中可用的120个不同的狗的品种的全连接</span>
final_fully_connected <span class="token operator">=</span> tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>fully_connected<span class="token punctuation">(</span>
    hidden_layer_three<span class="token punctuation">,</span>
    <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token comment"># Number of dog breeds in the ImageNet Dogs dataset</span>
    weight_init<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="训练" tabindex="-1"><a class="header-anchor" href="#训练" aria-hidden="true">#</a> 训练</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> glob

<span class="token comment"># 找到位于image-dog路径下的所有目录名(n02085620-Chihuahua,...)</span>
labels <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span> c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&quot;./imagenet-dogs/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 匹配每个来自label_batch的标签并返回它们在类别列表中的索引。</span>
train_labels <span class="token operator">=</span> tf<span class="token punctuation">.</span>map_fn<span class="token punctuation">(</span><span class="token keyword">lambda</span> l<span class="token punctuation">:</span> tf<span class="token punctuation">.</span>where<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label_batch<span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>损失、优化器、学习率</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>
    tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>sparse_softmax_cross_entropy_with_logits<span class="token punctuation">(</span>
        final_fully_connected<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token punctuation">)</span>

batch <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
learning_rate <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>exponential_decay<span class="token punctuation">(</span>
    <span class="token number">0.01</span><span class="token punctuation">,</span>
    batch <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token number">120</span><span class="token punctuation">,</span>
    <span class="token number">0.95</span><span class="token punctuation">,</span>
    staircase<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>AdamOptimizer<span class="token punctuation">(</span>
    learning_rate<span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>
    loss<span class="token punctuation">,</span> global_step<span class="token operator">=</span>batch<span class="token punctuation">)</span>

train_prediction <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>final_fully_connected<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续步骤</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># setup-only-ignore</span>
filename_queue<span class="token punctuation">.</span>close<span class="token punctuation">(</span>cancel_pending_enqueues<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
coord<span class="token punctuation">.</span>request_stop<span class="token punctuation">(</span><span class="token punctuation">)</span>
coord<span class="token punctuation">.</span>join<span class="token punctuation">(</span>threads<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终的代码" tabindex="-1"><a class="header-anchor" href="#最终的代码" aria-hidden="true">#</a> 最终的代码</h2><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,37),f={href:"https://github.com/backstopmedia/tensorflowbook/blob/master/chapters/05_object_recognition_and_classification/Chapter%205%20-%2005%20CNN%20Implementation.ipynb",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/hnxyxiaomeng/article/details/78517350",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/Alex-AI-Du/Tensorflow-Tutorial/blob/master/standford_dog/ST_run.py",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"本文参考了这几篇资料。",-1);function q(T,z){const o=e("RouterLink"),t=e("ExternalLinkIcon");return i(),l("div",null,[v,n("ul",null,[n("li",null,[a(o,{to:"/docs/machine-learning/machine-learning-framework/tensorflow/tensorflow1.0/tensorflow1.0.html"},{default:u(()=>[s("返回上层目录")]),_:1})])]),b,n("p",null,[n("a",_,[s("Stanford Dogs Dataset"),a(t)]),s("，"),n("a",g,[s("ReadMe"),a(t)])]),h,n("ul",null,[n("li",null,[n("a",f,[s("backstopmedia/tensorflowbook"),a(t)])]),n("li",null,[n("a",y,[s("《面向机器智能的tensorflow实践》第5.5节Stanford Dogs例程实现"),a(t)])]),n("li",null,[n("a",w,[s("Alex-AI-Du/Tensorflow-Tutorial"),a(t)])])]),x])}const F=c(m,[["render",q],["__file","cnn.html.vue"]]);export{F as default};
