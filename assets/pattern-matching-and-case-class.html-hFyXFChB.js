import{_ as p,r as t,o as c,c as i,b as s,e as a,w as l,d as n,a as r}from"./app-VitiyI7N.js";const u={},d=s("h1",{id:"模式匹配和样例类",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#模式匹配和样例类","aria-hidden":"true"},"#"),n(" 模式匹配和样例类")],-1),k=r(`<h1 id="模式匹配" tabindex="-1"><a class="header-anchor" href="#模式匹配" aria-hidden="true">#</a> 模式匹配</h1><p>模式匹配是检查某个值（value）是否匹配某一个模式的机制，一个成功的匹配同时会将匹配值解构为其组成部分。它是Java中的<code>switch</code>语句的升级版，同样可以用于替代一系列的 if/else 语句。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><p>一个模式匹配语句包括一个待匹配的值，<code>match</code>关键字，以及至少一个<code>case</code>语句。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random

<span class="token keyword">val</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> Random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

x <span class="token keyword">match</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">0</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;zero&quot;</span>
  <span class="token keyword">case</span> <span class="token number">1</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;one&quot;</span>
  <span class="token keyword">case</span> <span class="token number">2</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;two&quot;</span>
  <span class="token keyword">case</span> _ <span class="token keyword">=&gt;</span> <span class="token string">&quot;other&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的<code>val x</code>是一个0到10之间的随机整数，将它放在<code>match</code>运算符的左侧对其进行模式匹配，<code>match</code>的右侧是包含4条<code>case</code>的表达式，其中最后一个<code>case _</code>表示匹配其余所有情况，在这里就是其他可能的整型值。</p><p><code>match</code>表达式具有一个结果值</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">def</span> matchTest<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> x <span class="token keyword">match</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">1</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;one&quot;</span>
  <span class="token keyword">case</span> <span class="token number">2</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;two&quot;</span>
  <span class="token keyword">case</span> _ <span class="token keyword">=&gt;</span> <span class="token string">&quot;other&quot;</span>
<span class="token punctuation">}</span>
matchTest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// other</span>
matchTest<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// one</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="样例类case-class" tabindex="-1"><a class="header-anchor" href="#样例类case-class" aria-hidden="true">#</a> 样例类case class</h1><p>案例类（Case classes）和普通类差不多，只有几点关键差别，接下来的介绍将会涵盖这些差别。案例类非常适合用于不可变的数据。下一节将会介绍他们在模式匹配中的应用。</p><h2 id="定义一个案例类" tabindex="-1"><a class="header-anchor" href="#定义一个案例类" aria-hidden="true">#</a> 定义一个案例类</h2><p>一个最简单的案例类定义由关键字<code>case class</code>，类名，参数列表（可为空）组成：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Book<span class="token punctuation">(</span>isbn<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> frankenstein <span class="token operator">=</span> Book<span class="token punctuation">(</span><span class="token string">&quot;978-0486282114&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在实例化案例类<code>Book</code>时，并没有使用关键字<code>new</code>，这是因为案例类有一个默认的<code>apply</code>方法来负责对象的创建。</p><p>当你创建包含参数的案例类时，这些参数是公开（public）的<code>val</code></p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Message<span class="token punctuation">(</span>sender<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> recipient<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> message1 <span class="token operator">=</span> Message<span class="token punctuation">(</span><span class="token string">&quot;guillaume@quebec.ca&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jorge@catalonia.es&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ça va ?&quot;</span><span class="token punctuation">)</span>

println<span class="token punctuation">(</span>message1<span class="token punctuation">.</span>sender<span class="token punctuation">)</span>  <span class="token comment">// prints guillaume@quebec.ca</span>
message1<span class="token punctuation">.</span>sender <span class="token operator">=</span> <span class="token string">&quot;travis@washington.us&quot;</span>  <span class="token comment">// this line does not compile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你不能给<code>message1.sender</code>重新赋值，因为它是一个<code>val</code>（不可变）。在案例类中使用<code>var</code>也是可以的，但并不推荐这样。</p><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h2><p>案例类在比较的时候是按值比较而非按引用比较：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Message<span class="token punctuation">(</span>sender<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> recipient<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> message2 <span class="token operator">=</span> Message<span class="token punctuation">(</span><span class="token string">&quot;jorge@catalonia.es&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;guillaume@quebec.ca&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Com va?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> message3 <span class="token operator">=</span> Message<span class="token punctuation">(</span><span class="token string">&quot;jorge@catalonia.es&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;guillaume@quebec.ca&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Com va?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> messagesAreTheSame <span class="token operator">=</span> message2 <span class="token operator">==</span> message3  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管<code>message2</code>和<code>message3</code>引用不同的对象，但是他们的值是相等的，所以<code>message2 == message3</code>为<code>true</code>。</p><h2 id="拷贝" tabindex="-1"><a class="header-anchor" href="#拷贝" aria-hidden="true">#</a> 拷贝</h2><p>你可以通过<code>copy</code>方法创建一个案例类实例的浅拷贝，同时可以指定构造参数来做一些改变。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Message<span class="token punctuation">(</span>sender<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> recipient<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> message4 <span class="token operator">=</span> Message<span class="token punctuation">(</span><span class="token string">&quot;julien@bretagne.fr&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;travis@washington.us&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Me zo o komz gant ma amezeg&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> message5 <span class="token operator">=</span> message4<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>sender <span class="token operator">=</span> message4<span class="token punctuation">.</span>recipient<span class="token punctuation">,</span> recipient <span class="token operator">=</span> <span class="token string">&quot;claire@bourgogne.fr&quot;</span><span class="token punctuation">)</span>
message5<span class="token punctuation">.</span>sender  <span class="token comment">// travis@washington.us</span>
message5<span class="token punctuation">.</span>recipient <span class="token comment">// claire@bourgogne.fr</span>
message5<span class="token punctuation">.</span>body  <span class="token comment">// &quot;Me zo o komz gant ma amezeg&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码指定<code>message4</code>的<code>recipient</code>作为<code>message5</code>的<code>sender</code>，指定<code>message5</code>的<code>recipient</code>为”claire@bourgogne.fr”，而<code>message4</code>的<code>body</code>则是直接拷贝作为<code>message5</code>的<code>body</code>了。</p><h1 id="样例类的模式匹配" tabindex="-1"><a class="header-anchor" href="#样例类的模式匹配" aria-hidden="true">#</a> 样例类的模式匹配</h1><p>案例类非常适合用于模式匹配。</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Notification

<span class="token keyword">case</span> <span class="token keyword">class</span> Email<span class="token punctuation">(</span>sender<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification

<span class="token keyword">case</span> <span class="token keyword">class</span> SMS<span class="token punctuation">(</span>caller<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification

<span class="token keyword">case</span> <span class="token keyword">class</span> VoiceRecording<span class="token punctuation">(</span>contactName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Notification</code> 是一个虚基类，它有三个具体的子类<code>Email</code>, <code>SMS</code>和<code>VoiceRecording</code>，我们可以在这些案例类(Case Class)上像这样使用模式匹配：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">def</span> showNotification<span class="token punctuation">(</span>notification<span class="token operator">:</span> Notification<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  notification <span class="token keyword">match</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> Email<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> title<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span>
      <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;You got an email from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">sender</span></span><span class="token string"> with title: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">title</span></span><span class="token string">&quot;</span></span>
    <span class="token keyword">case</span> SMS<span class="token punctuation">(</span>number<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span>
      <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;You got an SMS from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">number</span></span><span class="token string">! Message: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&quot;</span></span>
    <span class="token keyword">case</span> VoiceRecording<span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span>
      <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;you received a Voice Recording from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">! Click the link to hear it: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">link</span></span><span class="token string">&quot;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">val</span> someSms <span class="token operator">=</span> SMS<span class="token punctuation">(</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Are you there?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> someVoiceRecording <span class="token operator">=</span> VoiceRecording<span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;voicerecording.org/id/123&quot;</span><span class="token punctuation">)</span>

println<span class="token punctuation">(</span>showNotification<span class="token punctuation">(</span>someSms<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// prints You got an SMS from 12345! Message: Are you there?</span>

println<span class="token punctuation">(</span>showNotification<span class="token punctuation">(</span>someVoiceRecording<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// you received a Voice Recording from Tom! Click the link to hear it: voicerecording.org/id/123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>showNotification</code>函数接受一个抽象类<code>Notification</code>对象作为输入参数，然后匹配其具体类型。（也就是判断它是一个<code>Email</code>，<code>SMS</code>，还是<code>VoiceRecording</code>）。在<code>case Email(sender, title, _)</code>中，对象的<code>sender</code>和<code>title</code>属性在返回值中被使用，而<code>body</code>属性则被忽略，故使用<code>_</code>代替。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,32),m={href:"https://docs.scala-lang.org/zh-cn/tour/pattern-matching.html",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,'"模式匹配"参考此博客。',-1),v={href:"https://docs.scala-lang.org/zh-cn/tour/case-classes.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.scala-lang.org/zh-cn/tour/pattern-matching.html",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,'"样例类case class"参考此博客。',-1);function y(w,q){const o=t("RouterLink"),e=t("ExternalLinkIcon");return c(),i("div",null,[d,s("ul",null,[s("li",null,[a(o,{to:"/docs/machine-learning/coding/big-data/scala/scala.html"},{default:l(()=>[n("返回上层目录")]),_:1})])]),k,s("ul",null,[s("li",null,[s("a",m,[n("模式匹配"),a(e)])])]),g,s("ul",null,[s("li",null,[s("a",v,[n("案例类（CASE CLASSES）"),a(e)])]),s("li",null,[s("a",b,[n("模式匹配"),a(e)])])]),h])}const S=p(u,[["render",y],["__file","pattern-matching-and-case-class.html.vue"]]);export{S as default};
