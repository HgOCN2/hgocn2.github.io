import{_ as c,r as a,o as p,c as l,b as e,e as s,w as i,d as n,a as d}from"./app-VitiyI7N.js";const r={},u=e("h1",{id:"优化器keras-optimizer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#优化器keras-optimizer","aria-hidden":"true"},"#"),n(" 优化器keras.optimizer")],-1),h=e("h1",{id:"根据epoch调整学习率",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#根据epoch调整学习率","aria-hidden":"true"},"#"),n(" 根据Epoch调整学习率")],-1),k=e("p",null,"在HRNet的论文中，作者提到他们训练模型时的学习率设置为：",-1),_=e("blockquote",null,[e("p",null,"The base learning rate is 0.0001 and is dropped to 0.00001 and 0.000001 at the 30 th and 50 th epochs.")],-1),m=e("p",null,"根据模型训练进程调整学习率是一种非常常见的做法。TensorFlow中自定义学习率策略有两种方法。",-1),b=e("h3",{id:"拓展learningrateschedule",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#拓展learningrateschedule","aria-hidden":"true"},"#"),n(" 拓展LearningRateSchedule")],-1),f=e("code",null,"tf.keras.optimizers.schedules",-1),g=e("code",null,"tf.keras.optimizers.schedules.LearningRateSchedule",-1),v=e("code",null,"optimizer",-1),x={href:"https://www.tensorflow.org/tutorials/text/transformer#training_and_checkpointing",target:"_blank",rel:"noopener noreferrer"},y=d(`<p>不过这种方法存在局限性。类方法 <code>def__call__(self, step)</code> 只允许传入一个参数 <code>step</code> 。所以你的调整策略要以当前的 <code>step</code> 为依据。如果要随epoch改变学习率，需要根据当前step推算epoch。</p><h3 id="自定义callback" tabindex="-1"><a class="header-anchor" href="#自定义callback" aria-hidden="true">#</a> 自定义callback</h3><p>通过callback来改变学习率是第二种可行的方案。同样，官方提供了完善的文档来说明如何做到这一点。HRNet在第30 epoch和50 epoch时改变了学习率。自定义callback可以帮助我们做到这一点。</p><h4 id="全局类方法" tabindex="-1"><a class="header-anchor" href="#全局类方法" aria-hidden="true">#</a> 全局类方法</h4><p>Keras.model的 <code>fit</code> 方法通过接受 <code>callback</code> 对象作为参数，可以获得训练过程的内部状态。在训练开始与结束时，每个batch开始与结束时，每个epoch开始与结束时， <code>callback</code> 对应的类方法会被调用。例如在每个epoch开始时会调用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>on_epoch_begin<span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在epoch结束时，则会调用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>on_epoch_end<span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> logs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种机制给我们调整训练过程提供了机会窗口。</p><h4 id="访问模型属性" tabindex="-1"><a class="header-anchor" href="#访问模型属性" aria-hidden="true">#</a> 访问模型属性</h4><p><code>callback</code> 还提供了访问模型本身的方法，进而可以获取、设定模型的训练学习率。例如获取模型当前学习率</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lr <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>get_value<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>learning_rate<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>on_epoch_begin</code> 函数中，<code>epoch</code>是一个已知参数。此刻可以根据<code>epoch</code>来调整学习率。之后再将新的学习率赋值给model</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>set_value<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>lr<span class="token punctuation">,</span> scheduled_lr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14);function w(z,N){const o=a("RouterLink"),t=a("ExternalLinkIcon");return p(),l("div",null,[u,e("ul",null,[e("li",null,[s(o,{to:"/docs/machine-learning/machine-learning-framework/tensorflow/tensorflow2.0/keras/keras.html"},{default:i(()=>[n("返回上层目录")]),_:1})])]),h,k,_,m,b,e("p",null,[n("第一种是通过API "),f,n(" 来实现。当前提供了5种学习率调整策略。如果这5种策略无法满足要求，可以通过拓展类 "),g,n(" 来自定义调整策略。然后将策略实例直接作为参数传入"),v,n(" 中。在官方示例"),e("a",x,[n("Transformer model"),s(t)]),n("中展示了具体的示例代码。")]),y])}const R=c(r,[["render",w],["__file","keras-optimizer.html.vue"]]);export{R as default};
