import{_ as i,r as t,o as p,c,b as n,e as a,w as l,d as s,a as d}from"./app-VitiyI7N.js";const r={},u=n("h1",{id:"cython",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cython","aria-hidden":"true"},"#"),s(" cython")],-1),m=d(`<h1 id="cython简介" tabindex="-1"><a class="header-anchor" href="#cython简介" aria-hidden="true">#</a> Cython简介</h1><p>Cython的本质可以总结如下：Cython是包含C数据类型的Python。</p><p>Cython是Python：几乎所有Python代码都是合法的Cython代码。 （存在一些限制，但是差不多也可以。） Cython的编译器会转化Python代码为C代码，这些C代码均可以调用Python/C的API。</p><p>Cython可不仅仅包含这些，Cython中的参数和变量还可以以C数据类型来声明。代码中的Python值和C的值可以自由地交叉混合（intermixed）使用, 所有的转化都是自动进行。</p><h1 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h1><p>在同一个目录下创建如下两个文件：</p><p><strong>pytest.pyx</strong></p><div class="language-cython line-numbers-mode" data-ext="cython"><pre class="language-cython"><code>import numpy as np
from libc.math cimport pow, tanh
cimport numpy as np
cimport cython
np.import_array()

cdef class FmSGD(object):

    cdef public int vec_dim

    def __init__(self, int vec_dim):
        self.vec_dim = vec_dim

    def fit(self, int num):
        self.vec_dim  = num

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>setup.py</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> find_packages<span class="token punctuation">,</span> Extension
<span class="token keyword">from</span> Cython<span class="token punctuation">.</span>Distutils <span class="token keyword">import</span> build_ext
<span class="token keyword">import</span> numpy

setup<span class="token punctuation">(</span>
    maintainer<span class="token operator">=</span><span class="token string">&#39;luwei&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">=</span><span class="token string">&#39;pytest&#39;</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.0.1&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    cmdclass <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;build_ext&#39;</span><span class="token punctuation">:</span> build_ext<span class="token punctuation">}</span><span class="token punctuation">,</span>
    ext_modules <span class="token operator">=</span> <span class="token punctuation">[</span>Extension<span class="token punctuation">(</span><span class="token string">&quot;pytest&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;pytest.pyx&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    						 libraries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    						 include_dirs<span class="token operator">=</span><span class="token punctuation">[</span>numpy<span class="token punctuation">.</span>get_include<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过<code>python setup.py build_ext --inplace</code>命令就可以将pytest库安装到python中了。</p><p>如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pytest <span class="token keyword">import</span> FmSGD
fm <span class="token operator">=</span> FmSGD<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>vec_dim
<span class="token comment">#11</span>
fm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>vec_dim
<span class="token comment">#22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li>python setup.py build_ext --inplace，这种方式不好，不利于后续的管理和替换，建议安装的时候用pip</li><li>安装cython文件，和anaconda没有任何关系，是给你的python添加组件，只影响你的python库</li><li>用conda打包，这样可以保证把依赖的库都打包好，不会有环境不一致的问题</li><li>cython文件是在桌面上的一个文件夹内，cd到该目录下，然后pip安装（pip可以安装本地的包<code>pip install .</code>），就会自动把这个文件添加到python环境里</li></ul><p><strong>安装方法：</strong></p><p>通过<code>conda env list</code>查看环境列表，激活你想安装的conda环境<code>source activate xxx</code>。</p><p>然后cd到cyhon文件的目录下，进行安装<code>pip install .</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Looking <span class="token keyword">in</span> indexes: http://mirrors.momo.com/pypi/simple/
Processing /data4/recommend_nearby/lu.wei/fm/cython
Building wheels <span class="token keyword">for</span> collected packages: PySparkFM
  Building wheel <span class="token keyword">for</span> PySparkFM <span class="token punctuation">(</span>setup.py<span class="token punctuation">)</span> <span class="token punctuation">..</span>. <span class="token keyword">done</span>
  Stored <span class="token keyword">in</span> directory: /tmp/pip-ephem-wheel-cache-4hx2m394/wheels/d8/6c/d4/645ca5adc6e249f6dc4e303a044be9c8d2aedb804bb0940b4c
Successfully built PySparkFM
Installing collected packages: PySparkFM
Successfully installed PySparkFM-0.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>pip install conda-pack</code>安装打包程序。</p><p>通过<code>conda pack -o ./luwei_environment.tar.gz</code>将需要的环境打包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Collecting packages<span class="token punctuation">..</span>.
Packing environment at <span class="token string">&#39;/home/recommend_nearby/work_space/anaconda3&#39;</span> to <span class="token string">&#39;./luwei_environment.tar.gz&#39;</span>
<span class="token punctuation">[</span><span class="token comment">####                                    ] | 12% Completed | 43.2s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并拷贝到目标机器或者上传到hdfs上</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hadoop fs -put ./luwei_environment.tar.gz hdfs://nameservice3/user/recommend_nearby/lu.wei/python3/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在目标机器上新建目录<code>mkdir -p $Anaconda/envs/xxx</code>。</p><p>解压<code>tar -xzf wrfpy.tar.gz -C $Anaconda/envs/xxx</code>。</p><p>此时<code>conda env list</code>就可以看到该环境了。</p><p><code>conda activate xxx</code>激活环境，执行<code>conda-unpack</code>，大功告成！</p><p>==== 另外，我发现还有个参数 --conf spark.pyspark.driver.python = /home/barrenlake/tmp/python-2.7.15/bin/python <br> 这个用该是告诉driver端，所用python的路径吧？ 那有了这个设置，是不是就可以不要export PATH=<code>pwd</code>/bin:$PATH了？</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h1>`,30),h={href:"https://moonlet.gitbooks.io/cython-document-zh_cn/content/ch1-basic_tutorial.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"“Cython简介”参考此博客。",-1),k={href:"https://zyxin.xyz/blog/2017-12/CythonIntro/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"“例子”参考该博客。",-1),y={href:"http://docs.cython.org/en/latest/src/userguide/wrapping_CPlusPlus.html",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"更多请看官方文档。",-1),g={href:"https://www.jianshu.com/p/d77e16008957",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[n("code",null,"--archives xxx#xxx"),s("和"),n("code",null,"--conf spark.pyspark.driver.python"),s("。")],-1),x={href:"https://blog.csdn.net/crookie/article/details/78351095",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"python上传后，在进行spark-submit时，会自动分发anaconda2的包到各个工作节点。但还需要给工作节点指定python解压路径。",-1),C={href:"https://youyou-tech.com/2019/11/03/Anaconda%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85%E8%BF%81%E7%A7%BB%E5%88%B0%E5%8F%A6%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"使用Conda-Pack来进行环境的打包和迁移。",-1),E={href:"https://conda.github.io/conda-pack/",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"Conda-Pack的官方说明。",-1);function S(B,F){const o=t("RouterLink"),e=t("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[n("li",null,[a(o,{to:"/docs/machine-learning/coding/programing-language/python/python.html"},{default:l(()=>[s("返回上层目录")]),_:1})])]),m,n("ul",null,[n("li",null,[n("a",h,[s("Cython官方文档中文版"),a(e)])])]),v,n("ul",null,[n("li",null,[n("a",k,[s("Cython - 入门简介"),a(e)])])]),b,n("ul",null,[n("li",null,[n("a",y,[s("官方文档：Using C++ in Cython"),a(e)])])]),_,n("ul",null,[n("li",null,[n("a",g,[s("Spark on Yarn 之Python环境定制"),a(e)])])]),f,n("ul",null,[n("li",null,[n("a",x,[s("pyspark使用anaconda后spark-submit方法"),a(e)])])]),w,n("ul",null,[n("li",null,[n("a",C,[s("Anaconda环境打包迁移到另一台机器"),a(e)])])]),P,n("ul",null,[n("li",null,[n("a",E,[s("Conda-Pack"),a(e)])])]),A])}const q=i(r,[["render",S],["__file","cython.html.vue"]]);export{q as default};
