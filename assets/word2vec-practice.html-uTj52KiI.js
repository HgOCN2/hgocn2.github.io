import{_ as s,r as n,o as c,c as i,b as e,e as r,w as l,d as o,a as d}from"./app-VitiyI7N.js";const h="/assets/embedding-37000-books-CboSUFI-.jpg",p="/assets/embedding-37000-books-with-color-iBQNRsE5.jpg",_="/assets/embedding-37000-books-using-pojector-OxCEHevG.gif",b={},g=e("h1",{id:"word2vector实践",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#word2vector实践","aria-hidden":"true"},"#"),o(" word2vector实践")],-1),u=e("h1",{id:"原版word2vec实践",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原版word2vec实践","aria-hidden":"true"},"#"),o(" 原版word2vec实践")],-1),m={href:"https://code.google.com/archive/p/word2vec/",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"下面的介绍仅仅适用于linux系统，windows其实也差不多，只是不能用sh语言了，需要自己去手动编译和运行程序或者自己写bat语言。",-1),w=e("h2",{id:"下载源码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#下载源码","aria-hidden":"true"},"#"),o(" 下载源码")],-1),v={href:"https://github.com/dav/word2vec",target:"_blank",rel:"noopener noreferrer"},x=e("h2",{id:"下载训练数据",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#下载训练数据","aria-hidden":"true"},"#"),o(" 下载训练数据")],-1),k={href:"http://mattmahoney.net/dc/text8.zip",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"unzip text8.zip",-1),j=e("code",null,"\\data",-1),N=d('<p>其实在sh文件中会自动下载text8，但是还是自己先下载下来吧。</p><h2 id="开始训练模型" tabindex="-1"><a class="header-anchor" href="#开始训练模型" aria-hidden="true">#</a> 开始训练模型</h2><p>（1）由c源码生成可执行文件</p><p>两种方法：</p><p>第一种方法：进入word2vec的根目录，然后命令行运行<code>make build</code>把<code>\\src</code>文件夹中的c文件编译为可执行文件放到<code>\\bin</code>文件夹中。</p><p>第二种方法：进入word2vec\\src目录，然后命令行运行<code>make</code>把<code>\\src</code>文件夹中的c文件编译为可执行文件放到<code>\\bin</code>文件夹中。</p><p>（2）运行可执行文件开始训练模型</p><p>进入根目录下的<code>\\scripts</code>文件夹，然后运行sh文件demo-classes.sh：<code>sh demo-classes.sh</code>，等待程序运行完毕（可能需要五分钟到一个小时之间，看机器性能）。</p><h2 id="得到结果文件" tabindex="-1"><a class="header-anchor" href="#得到结果文件" aria-hidden="true">#</a> 得到结果文件</h2><p>等训练结束后，会在<code>\\data</code>文件夹中生成两个文件：classes.txt和classes.sorted.txt，其中classes.txt就是我们需要的文件。打开就能看到每个单词训练的embedding向量了。</p><h2 id="查看topn相似度" tabindex="-1"><a class="header-anchor" href="#查看topn相似度" aria-hidden="true">#</a> 查看TopN相似度</h2><p>进入根目录下的<code>\\scripts</code>文件夹，然后运行sh文件demo-word.sh：<code>sh demo-word.sh</code>，然后按照提示输入单词，查看与其相近的前40个词及相似程度。</p>',12),z={href:"https://blog.csdn.net/a785143175/article/details/23771625",target:"_blank",rel:"noopener noreferrer"},T=d('<h1 id="embedding的可视化" tabindex="-1"><a class="header-anchor" href="#embedding的可视化" aria-hidden="true">#</a> embedding的可视化</h1><p>##TSNE降维</p><p>Embedding最酷的一个地方在于它们可以用来可视化出表示的数据的相关性，当然要我们能够观察，需要通过降维技术来达到2维或3维。最流行的降维技术是：t-Distributed Stochastic Neighbor Embedding (TSNE)。</p><p>我们可以定义维基百科上所有书籍为原始37000维（one-hot编码），使用neural network embedding将它们映射到50维，然后使用TSNE将它们映射到2维，其结果如下：</p><p><img src="'+h+'" alt="embedding-37000-books"></p><p>这样看好像并不能看出什么，但是如果我们根据不同书籍的特征着色，我们将可以很明显的看出结果。</p><p>我们可以清楚地看到属于同一类型的书籍的分组。虽然它并不完美，但惊奇的是，我们只用2个数字就代表维基百科上的所有书籍，而在这些数字中仍能捕捉到不同类型之间的差异。这代表着embedding的价值。</p><p><img src="'+p+'" alt="embedding-37000-books-with-color"></p><h2 id="tensorflow-projector" tabindex="-1"><a class="header-anchor" href="#tensorflow-projector" aria-hidden="true">#</a> TensorFlow-projector</h2>',9),S={href:"https://projector.tensorflow.org/",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,[e("img",{src:_,alt:"embedding-37000-books-using-pojector"})],-1),L=e("p",null,"Embedding的基本内容如前面介绍所示，然而我想说的是它的价值并不仅仅在于word embedding或者entity embedding，这种将类别数据用低维表示且可自学习的思想更存在价值。通过这种方式，我们可以将神经网络，深度学习用于更广泛的领域，Embedding可以表示更多的东西，而这其中的关键在于要想清楚我们需要解决的问题和应用Embedding表示我们得到的是什么。",-1),V=e("h2",{id:"google-tensorboard",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#google-tensorboard","aria-hidden":"true"},"#"),o(" google-tensorboard")],-1),y={href:"https://www.tensorflow.org/tensorboard/r1/summaries",target:"_blank",rel:"noopener noreferrer"},B={href:"http://projector.tensorflow.org/",target:"_blank",rel:"noopener noreferrer"},F=e("h1",{id:"word2vec的参数选择",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#word2vec的参数选择","aria-hidden":"true"},"#"),o(" word2vec的参数选择")],-1),I={href:"https://blog.csdn.net/xiaojiayudst/article/details/84668729",target:"_blank",rel:"noopener noreferrer"},R=e("h1",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),o(" 参考资料")],-1),D={href:"https://blog.csdn.net/zwwhsxq/article/details/77200129",target:"_blank",rel:"noopener noreferrer"},q={href:"https://kexue.fm/usr/uploads/2017/04/146269300.pdf",target:"_blank",rel:"noopener noreferrer"},G={href:"https://blog.csdn.net/bitcarmanlee/article/details/51182420",target:"_blank",rel:"noopener noreferrer"},H={href:"https://code.google.com/archive/p/word2vec/",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"“原版word2vec实践”参考了上述资料。",-1),P={href:"https://zhuanlan.zhihu.com/p/46016518",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://zhuanlan.zhihu.com/p/29364112",target:"_blank",rel:"noopener noreferrer"},U=e("p",null,"“embedding的可视化”参考了该知乎专栏文章。",-1);function W(A,J){const a=n("RouterLink"),t=n("ExternalLinkIcon");return c(),i("div",null,[g,e("ul",null,[e("li",null,[r(a,{to:"/docs/machine-learning/natural-language-processing/word2vec/word2vec.html"},{default:l(()=>[o("返回上层目录")]),_:1})])]),u,e("p",null,[o("官方使用说明："),e("a",m,[o("word2vec"),r(t)]),o("，这个并没有实践过，只是放在这里，下面是经过实践检验的：")]),f,w,e("p",null,[o("github:"),e("a",v,[o("dav/word2vec"),r(t)])]),x,e("p",null,[o("下载训练数据："),e("a",k,[o("text8.zip"),r(t)]),o("，用"),E,o("将其解压缩到"),j,o("文件夹中，文件名为text8，这个解压后的文件text8就是模型训练需要的数据了。")]),N,e("p",null,[o("相似程度的代码是distance.c，很简单，有个博客有对这个代码的注释："),e("a",z,[o("Word2Vec代码注解-distance"),r(t)])]),T,e("p",null,[o("静态图的问题在于我们无法真正探索数据并调查变量之间的分组或关系。 为了解决这个问题，TensorFlow开发了 "),e("a",S,[o("projector"),r(t)]),o("，这是一个在线应用程序，可以让我们可视化并与embedding交互。 结果如下：")]),C,L,V,e("p",null,[o("词的分布，推荐用google的"),e("a",y,[o("tensorboard"),r(t)]),o("，可以多视角查看，如果不想搭建服务，直接访问"),e("a",B,[o("TensorFlow-projector"),r(t)]),o("。另外可以用python的matplotlib。")]),F,e("p",null,[e("a",I,[o("word2vec你可能不知道的秘密"),r(t)])]),R,e("ul",null,[e("li",null,[e("a",D,[o("使用word2vec（C语言版本）训练中文语料 并且将得到的vector.bin文件转换成txt文件"),r(t)])]),e("li",null,[e("a",q,[o("Deep Learning 实战之 word2vec"),r(t)])]),e("li",null,[e("a",G,[o("word2vec 入门教程"),r(t)])]),e("li",null,[e("a",H,[o("word2vec-google code"),r(t)])])]),O,e("ul",null,[e("li",null,[e("a",P,[o("Embedding 的理解"),r(t)])]),e("li",null,[e("a",Q,[o("关于word2vec，我有话要说"),r(t)])])]),U])}const M=s(b,[["render",W],["__file","word2vec-practice.html.vue"]]);export{M as default};
